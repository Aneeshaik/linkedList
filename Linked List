class LL {
    Node head;
    public int size;
    LL(){
        this.size = 0;
    }
    class Node{
        String data;
        Node next;
        Node(String data){
            this.data = data;
            this.next = null;
            size++;
        }
    }
    public void addFirst(String data){
        Node newNode = new Node(data);
        if(head == null){
            head = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }
    public void addLast(String data){
        Node newNode = new Node(data);
        if(head == null){
            head = newNode;
            return;
        }
        Node currNode = head;
        while(currNode.next != null){
            currNode = currNode.next;
        }
        currNode.next = newNode;
    }
    public void deleteFirst(){
        if(head == null){
            System.out.println("List is empty");
        }
        size--;
        head = head.next;
    }
    public void deleteLast(){
        if(head == null){
            System.out.println("List is empty");
        }
        size--;
        if(head.next == null){
            head = null;
        }
        Node secondLast = head;
        Node lastNode = head.next;
        while(lastNode.next != null){
            secondLast = secondLast.next;
            lastNode = lastNode.next;
        }
        secondLast.next = null;
    }
    public void reverseList(){
        Node prevNode = head;
        Node curNode = head.next;
        while(curNode != null){
            Node nextNode = curNode.next;
            curNode.next = prevNode;
            //update
            prevNode = curNode;
            curNode = nextNode;
        }
        head.next = null;
        head = prevNode;
    }
    public Node reverseRecursive(Node head){
        if(head == null || head.next == null){
            return head;
        }
        Node newNode = reverseRecursive(head.next);
        head.next.next = head;
        head.next = null;
        return newNode;
    }
    public Node removeNthFromEnd(Node head, int n){
        if(head.next == null){
            return null;
        }
        if(n == size){
            return head.next;
        }
        int index = size - n;
        Node prev = head;
        int i = 1;
        while(i < index){
            prev = prev.next;
            i++;
        }
        prev.next = prev.next.next;
        return head;
    }
    public int printSize(){
        return size;
    }
    public void printList(){
        if(head == null){
            System.out.println("List is empty");
        }
        Node currNode = head;
        while(currNode != null){
            System.out.print(currNode.data + "-->");
            currNode = currNode.next;
        }
        System.out.println("NULL");
    }
    public static void main(String args[]){
        LL list = new LL();
        list.addFirst("a");
        list.addFirst("is");
        list.addFirst("This");
        list.addLast("List");
        list.printList();
        list.deleteFirst();
        list.printList();
        list.deleteLast();
        list.printList();
        list.reverseList();
        list.printList();
        list.head = list.reverseRecursive(list.head);
        list.head = list.removeNthFromEnd(list.head, 3);
        System.out.println(list.printSize());
    }
}
